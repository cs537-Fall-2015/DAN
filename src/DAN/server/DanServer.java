package DAN.server;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Random;
import javax.swing.JTextArea;
import json.MyWriter;
import generic.RoverServerRunnable;

public class DanServer extends RoverServerRunnable {
	
	public DanServer(int port) throws IOException {
		super(port);
	}
	
	public String turnPngOn(DanClass dan, JTextArea clientText) throws InterruptedException {
		String message = null;
		if(dan.isDAN_ON()) {
			dan.setDAN_PNG_ON(true);
			clientText.append("\nGenerating Pulse Neutron..\n");
			Thread.sleep(3000);
			message = " Pulsed Neutron is turned on Successfully";
		}
		return message;
	}
	public void setNeutron(DANClass2 dan, String messageToClient) {
		
		Random r = new Random();
		
		int neutron_counted = r.nextInt((int)dan.getNEUTRON_COUNT() - 0) + 0;
		
		System.out.println("\n Neutrons Generated By Generator: " +dan.getNEUTRON_COUNT()+ "\n");
		

		dan.setNEUTRON_COUNT(neutron_counted);
	}	

	@Override
	public void run() {
		
		DANClass2 dan = new DANClass2 ();
		

		// Initialized all GUI
		
		try {
			
			getRoverServerSocket().openSocket();
			
			// Getting Input from Client
			ObjectInputStream inputFromAnotherObject = new ObjectInputStream(getRoverServerSocket().getSocket().getInputStream());
			// Writing output to Client
			ObjectOutputStream outputToAnotherObject = new ObjectOutputStream(getRoverServerSocket().getSocket().getOutputStream());
			
			// this loops run indefinitely, so that server will receive the commands one by one.
			while(true) {
				// Reading the message from client.
				String messageFromClient = (String) inputFromAnotherObject.readObject();
				// Store the messages to "messageToClient" before write the output to Client
				String messageToClient= null;
				// Append the output to the Text area(GUI)
				System.out.println("\n------------------------------------------------------------------\n");
				System.out.println("Server : COMMAND RECEIVED - "+messageFromClient+"\n");
				System.out.println("------------------------------------------------------------------\n");
				
				switch(messageFromClient) {
					case "DAN_ON":
						System.out.println("DAN is turning on. Please wait..");
						// Server thread sleep for 2000 milliseconds
						Thread.sleep(2000);
						messageToClient = "DAN is turned on";
						// call the "setDAN_ON method to set the dan is turned on as true. 
						dan.setDAN_ON(true);
						break;
						
					case "DAN_PNG_ON":
						System.out.println("DAN Pulsed Neutron Generator is turning on. Please wait.....");
						Thread.sleep(1000);
						// call the turnpngOn method to turn the png on.
						messageToClient = "PNG is turned on";
						dan.setPNG_ON(true);
						break;
						
					case "DAN_PNG_OFF" :
						messageToClient = "DAN png is turned off";
						break;
						
					case "DAN_DE_ON":
						messageToClient = "DAN de is turned on";
						System.out.println("Counting neutrons. Please wait...");
						Thread.sleep(1000);
						dan.setNEUTRON_COUNT(dan.getNEUTRON_COUNT());
						break;
						
					case "DAN_DE_OFF":
						messageToClient = "DAN de is turned off";
						break;
						
					case "DAN_OFF":
						messageToClient = "DAN turned off";
						break;
					default:
						break;
				}
				// write the message to the client (Don't do multiple write. It may stuck if you don't read in client after you from server)
				outputToAnotherObject.writeObject(messageToClient);
				
				// check if DAN_TURN_OFF and break the loop. So that server will not receive any message from client.
				if (messageFromClient.equals("DAN_OFF")) {
					break;
				}
			}
			// write the object to JSON file. you can look at the 10.json file for output.
			new MyWriter(dan, 10);
			
			inputFromAnotherObject.close();
          	outputToAnotherObject.close();
			// close the ServerSocket object
			closeAll();

		}
		
		catch (IOException e)
		{
			 e.printStackTrace();
		} 
		catch (ClassNotFoundException e) 
		{
			e.printStackTrace();
		} 
		catch (Exception error) 
		{
			System.out.println("Server: Error: " + error.getMessage());
			error.printStackTrace();
		}

	}

}







